Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.

module.vpc.data.template_file.user_data: Refreshing state...

------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.vpc.aws_default_network_acl.default_acl will be created
  + resource "aws_default_network_acl" "default_acl" {
      + default_network_acl_id = (known after apply)
      + id                     = (known after apply)
      + owner_id               = (known after apply)
      + tags                   = {
          + "Createdby"     = "Ololosh Ivanovich"
          + "Environment"   = "test"
          + "Name"          = "vpcForHw-nacl-test"
          + "Orchestration" = "Terraform"
        }
      + vpc_id                 = (known after apply)

      + egress {
          + action     = "allow"
          + cidr_block = "0.0.0.0/0"
          + from_port  = 1024
          + protocol   = "tcp"
          + rule_no    = 103
          + to_port    = 65535
        }
      + egress {
          + action     = "allow"
          + cidr_block = "0.0.0.0/0"
          + from_port  = 443
          + protocol   = "tcp"
          + rule_no    = 102
          + to_port    = 443
        }
      + egress {
          + action     = "allow"
          + cidr_block = "0.0.0.0/0"
          + from_port  = 80
          + protocol   = "tcp"
          + rule_no    = 101
          + to_port    = 80
        }
      + egress {
          + action     = "allow"
          + cidr_block = "192.168.0.0/16"
          + from_port  = 0
          + protocol   = "all"
          + rule_no    = 100
          + to_port    = 0
        }

      + ingress {
          + action     = "allow"
          + cidr_block = "0.0.0.0/0"
          + from_port  = 22
          + protocol   = "tcp"
          + rule_no    = 102
          + to_port    = 22
        }
      + ingress {
          + action     = "allow"
          + cidr_block = "0.0.0.0/0"
          + from_port  = 32768
          + protocol   = "tcp"
          + rule_no    = 103
          + to_port    = 61000
        }
      + ingress {
          + action     = "allow"
          + cidr_block = "0.0.0.0/0"
          + from_port  = 443
          + protocol   = "tcp"
          + rule_no    = 101
          + to_port    = 443
        }
      + ingress {
          + action     = "allow"
          + cidr_block = "0.0.0.0/0"
          + from_port  = 80
          + protocol   = "tcp"
          + rule_no    = 100
          + to_port    = 80
        }
    }

  # module.vpc.aws_eip.nat_eip[0] will be created
  + resource "aws_eip" "nat_eip" {
      + allocation_id     = (known after apply)
      + association_id    = (known after apply)
      + domain            = (known after apply)
      + id                = (known after apply)
      + instance          = (known after apply)
      + network_interface = (known after apply)
      + private_dns       = (known after apply)
      + private_ip        = (known after apply)
      + public_dns        = (known after apply)
      + public_ip         = (known after apply)
      + public_ipv4_pool  = (known after apply)
      + vpc               = true
    }

  # module.vpc.aws_instance.priec2[0] will be created
  + resource "aws_instance" "priec2" {
      + ami                          = "ami-0b418580298265d5c"
      + arn                          = (known after apply)
      + associate_public_ip_address  = (known after apply)
      + availability_zone            = "eu-central-1b"
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "t2.micro"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = "test_key_for_terraform"
      + network_interface_id         = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + security_groups              = (known after apply)
      + source_dest_check            = true
      + subnet_id                    = (known after apply)
      + tags                         = {
          + "Createdby"     = "Ololosh Ivanovich"
          + "Environment"   = "test"
          + "Name"          = "private_ec2-eu-central-1b"
          + "Orchestration" = "Terraform"
        }
      + tenancy                      = (known after apply)
      + user_data                    = "e794f07897493880c936c2f375cb19e9e1077501"
      + volume_tags                  = (known after apply)
      + vpc_security_group_ids       = (known after apply)

      + credit_specification {
          + cpu_credits = "standard"
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = true
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 8
          + volume_type           = "gp2"
        }
    }

  # module.vpc.aws_instance.pubec2[0] will be created
  + resource "aws_instance" "pubec2" {
      + ami                          = "ami-0b418580298265d5c"
      + arn                          = (known after apply)
      + associate_public_ip_address  = (known after apply)
      + availability_zone            = "eu-central-1b"
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "t2.micro"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = "test_key_for_terraform"
      + network_interface_id         = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + security_groups              = (known after apply)
      + source_dest_check            = true
      + subnet_id                    = (known after apply)
      + tags                         = {
          + "Createdby"     = "Ololosh Ivanovich"
          + "Environment"   = "test"
          + "Name"          = "public_ec2-eu-central-1b"
          + "Orchestration" = "Terraform"
        }
      + tenancy                      = (known after apply)
      + user_data                    = "e794f07897493880c936c2f375cb19e9e1077501"
      + volume_tags                  = (known after apply)
      + vpc_security_group_ids       = (known after apply)

      + credit_specification {
          + cpu_credits = "standard"
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = true
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 8
          + volume_type           = "gp2"
        }
    }

  # module.vpc.aws_internet_gateway.internet_gw[0] will be created
  + resource "aws_internet_gateway" "internet_gw" {
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Createdby"     = "Ololosh Ivanovich"
          + "Environment"   = "test"
          + "Name"          = "internet-gateway to vpcForHw-vpc-test"
          + "Orchestration" = "Terraform"
        }
      + vpc_id   = (known after apply)
    }

  # module.vpc.aws_nat_gateway.nat_gw[0] will be created
  + resource "aws_nat_gateway" "nat_gw" {
      + allocation_id        = (known after apply)
      + id                   = (known after apply)
      + network_interface_id = (known after apply)
      + private_ip           = (known after apply)
      + public_ip            = (known after apply)
      + subnet_id            = (known after apply)
    }

  # module.vpc.aws_route.private_nat_gateway[0] will be created
  + resource "aws_route" "private_nat_gateway" {
      + destination_cidr_block     = "0.0.0.0/0"
      + destination_prefix_list_id = (known after apply)
      + egress_only_gateway_id     = (known after apply)
      + gateway_id                 = (known after apply)
      + id                         = (known after apply)
      + instance_id                = (known after apply)
      + instance_owner_id          = (known after apply)
      + nat_gateway_id             = (known after apply)
      + network_interface_id       = (known after apply)
      + origin                     = (known after apply)
      + route_table_id             = (known after apply)
      + state                      = (known after apply)
    }

  # module.vpc.aws_route.public_internet_gateway[0] will be created
  + resource "aws_route" "public_internet_gateway" {
      + destination_cidr_block     = "0.0.0.0/0"
      + destination_prefix_list_id = (known after apply)
      + egress_only_gateway_id     = (known after apply)
      + gateway_id                 = (known after apply)
      + id                         = (known after apply)
      + instance_id                = (known after apply)
      + instance_owner_id          = (known after apply)
      + nat_gateway_id             = (known after apply)
      + network_interface_id       = (known after apply)
      + origin                     = (known after apply)
      + route_table_id             = (known after apply)
      + state                      = (known after apply)
    }

  # module.vpc.aws_route_table.private_route_tables[0] will be created
  + resource "aws_route_table" "private_route_tables" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = {
          + "Createdby"     = "Ololosh Ivanovich"
          + "Environment"   = "test"
          + "Name"          = "private_route_tables"
          + "Orchestration" = "Terraform"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table.public_route_tables[0] will be created
  + resource "aws_route_table" "public_route_tables" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = {
          + "Createdby"     = "Ololosh Ivanovich"
          + "Environment"   = "test"
          + "Name"          = "public_route_tables"
          + "Orchestration" = "Terraform"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table_association.private_route_table_associations[0] will be created
  + resource "aws_route_table_association" "private_route_table_associations" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.public_route_table_associations[0] will be created
  + resource "aws_route_table_association" "public_route_table_associations" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_security_group.sg will be created
  + resource "aws_security_group" "sg" {
      + arn                    = (known after apply)
      + description            = "Security Group vpcForHw-sg-test"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "vpcForHw-sg-test"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Createdby"     = "Ololosh Ivanovich"
          + "Environment"   = "test"
          + "Name"          = "vpcForHw-sg-test"
          + "Orchestration" = "Terraform"
        }
      + vpc_id                 = (known after apply)
    }

  # module.vpc.aws_security_group_rule.default_egress[0] will be created
  + resource "aws_security_group_rule" "default_egress" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + from_port                = 0
      + id                       = (known after apply)
      + protocol                 = "-1"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 0
      + type                     = "egress"
    }

  # module.vpc.aws_security_group_rule.icmp-self will be created
  + resource "aws_security_group_rule" "icmp-self" {
      + from_port                = -1
      + id                       = (known after apply)
      + protocol                 = "icmp"
      + security_group_id        = (known after apply)
      + self                     = true
      + source_security_group_id = (known after apply)
      + to_port                  = -1
      + type                     = "ingress"
    }

  # module.vpc.aws_security_group_rule.ingress_ports[0] will be created
  + resource "aws_security_group_rule" "ingress_ports" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + from_port                = 22
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 22
      + type                     = "ingress"
    }

  # module.vpc.aws_security_group_rule.ingress_ports[1] will be created
  + resource "aws_security_group_rule" "ingress_ports" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + from_port                = 80
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 80
      + type                     = "ingress"
    }

  # module.vpc.aws_security_group_rule.ingress_ports[2] will be created
  + resource "aws_security_group_rule" "ingress_ports" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + from_port                = 3306
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 3306
      + type                     = "ingress"
    }

  # module.vpc.aws_security_group_rule.ingress_ports[3] will be created
  + resource "aws_security_group_rule" "ingress_ports" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + from_port                = 443
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 443
      + type                     = "ingress"
    }

  # module.vpc.aws_subnet.private_subnets[0] will be created
  + resource "aws_subnet" "private_subnets" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "eu-central-1b"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "192.168.11.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Createdby"     = "Ololosh Ivanovich"
          + "Environment"   = "test"
          + "Name"          = "private_subnet-eu-central-1b"
          + "Orchestration" = "Terraform"
        }
      + vpc_id                          = (known after apply)
    }

  # module.vpc.aws_subnet.public_subnets[0] will be created
  + resource "aws_subnet" "public_subnets" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "eu-central-1b"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "192.168.12.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Createdby"     = "Ololosh Ivanovich"
          + "Environment"   = "test"
          + "Name"          = "public_subnet-eu-central-1b"
          + "Orchestration" = "Terraform"
        }
      + vpc_id                          = (known after apply)
    }

  # module.vpc.aws_vpc.vpc will be created
  + resource "aws_vpc" "vpc" {
      + arn                              = (known after apply)
      + assign_generated_ipv6_cidr_block = false
      + cidr_block                       = "192.168.0.0/16"
      + default_network_acl_id           = (known after apply)
      + default_route_table_id           = (known after apply)
      + default_security_group_id        = (known after apply)
      + dhcp_options_id                  = (known after apply)
      + enable_classiclink               = false
      + enable_classiclink_dns_support   = (known after apply)
      + enable_dns_hostnames             = true
      + enable_dns_support               = true
      + id                               = (known after apply)
      + instance_tenancy                 = "default"
      + ipv6_association_id              = (known after apply)
      + ipv6_cidr_block                  = (known after apply)
      + main_route_table_id              = (known after apply)
      + owner_id                         = (known after apply)
      + tags                             = {
          + "Createdby"     = "Ololosh Ivanovich"
          + "Environment"   = "test"
          + "Name"          = "vpcforhw-vpc-test"
          + "Orchestration" = "Terraform"
        }
    }

Plan: 22 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.