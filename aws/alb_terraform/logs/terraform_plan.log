Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.

module.ec2.data.template_file.user_data: Refreshing state...
module.iam.data.aws_iam_policy_document.role-policy-document: Refreshing state...
module.iam.data.aws_iam_policy_document.cross_account_assume_role_policy: Refreshing state...
module.iam.data.aws_iam_policy_document.policy-document: Refreshing state...

------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.alb.aws_lb.alb will be created
  + resource "aws_lb" "alb" {
      + arn                        = (known after apply)
      + arn_suffix                 = (known after apply)
      + dns_name                   = (known after apply)
      + enable_deletion_protection = false
      + enable_http2               = true
      + id                         = (known after apply)
      + idle_timeout               = 60
      + internal                   = false
      + ip_address_type            = "ipv4"
      + load_balancer_type         = "application"
      + name                       = "app-load-balancer-alb-prod"
      + security_groups            = (known after apply)
      + subnets                    = (known after apply)
      + tags                       = {
          + "Createdby"     = "Ololosh Ivanovich"
          + "Environment"   = "PROD"
          + "Name"          = "app-load-balancer-alb-prod"
          + "Orchestration" = "Terraform"
        }
      + vpc_id                     = (known after apply)
      + zone_id                    = (known after apply)

      + subnet_mapping {
          + allocation_id = (known after apply)
          + subnet_id     = (known after apply)
        }

      + timeouts {
          + create = "10m"
          + delete = "10m"
          + update = "10m"
        }
    }

  # module.alb.aws_lb_listener.frontend_http[0] will be created
  + resource "aws_lb_listener" "frontend_http" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + load_balancer_arn = (known after apply)
      + port              = 80
      + protocol          = "HTTP"
      + ssl_policy        = (known after apply)

      + default_action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }
    }

  # module.alb.aws_lb_target_group.alb_target_group will be created
  + resource "aws_lb_target_group" "alb_target_group" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + deregistration_delay               = 300
      + id                                 = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancing_algorithm_type      = (known after apply)
      + name                               = "app-load-balancer-alb-tg-prod"
      + port                               = 80
      + protocol                           = "HTTP"
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags                               = {
          + "Createdby"     = "Ololosh Ivanovich"
          + "Environment"   = "PROD"
          + "Name"          = "app-load-balancer-alb-tg-prod"
          + "Orchestration" = "Terraform"
        }
      + target_type                        = "instance"
      + vpc_id                             = (known after apply)

      + health_check {
          + enabled             = true
          + healthy_threshold   = 3
          + interval            = 10
          + matcher             = "200-299"
          + path                = "/"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = 5
          + unhealthy_threshold = 3
        }

      + stickiness {
          + cookie_duration = 1
          + enabled         = false
          + type            = "lb_cookie"
        }
    }

  # module.alb.aws_lb_target_group_attachment.alb_target_group_attachment will be created
  + resource "aws_lb_target_group_attachment" "alb_target_group_attachment" {
      + id               = (known after apply)
      + port             = 80
      + target_group_arn = (known after apply)
      + target_id        = (known after apply)
    }

  # module.ec2.aws_instance.instance[0] will be created
  + resource "aws_instance" "instance" {
      + ami                          = "ami-0b418580298265d5c"
      + arn                          = (known after apply)
      + associate_public_ip_address  = true
      + availability_zone            = (known after apply)
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + disable_api_termination      = false
      + ebs_optimized                = false
      + get_password_data            = false
      + host_id                      = (known after apply)
      + iam_instance_profile         = (known after apply)
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "t2.micro"
      + ipv6_address_count           = 0
      + ipv6_addresses               = []
      + key_name                     = (known after apply)
      + monitoring                   = false
      + network_interface_id         = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + security_groups              = (known after apply)
      + source_dest_check            = false
      + subnet_id                    = (known after apply)
      + tags                         = {
          + "Createdby"     = "Ololosh Ivanovich"
          + "Environment"   = "PROD"
          + "Name"          = "web_server-ec2-prod-1"
          + "Orchestration" = "Terraform"
        }
      + tenancy                      = "default"
      + user_data                    = "e794f07897493880c936c2f375cb19e9e1077501"
      + volume_tags                  = (known after apply)
      + vpc_security_group_ids       = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = true
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 8
          + volume_type           = "gp2"
        }
    }

  # module.ec2.aws_instance.instance[1] will be created
  + resource "aws_instance" "instance" {
      + ami                          = "ami-0b418580298265d5c"
      + arn                          = (known after apply)
      + associate_public_ip_address  = true
      + availability_zone            = (known after apply)
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + disable_api_termination      = false
      + ebs_optimized                = false
      + get_password_data            = false
      + host_id                      = (known after apply)
      + iam_instance_profile         = (known after apply)
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "t2.micro"
      + ipv6_address_count           = 0
      + ipv6_addresses               = []
      + key_name                     = (known after apply)
      + monitoring                   = false
      + network_interface_id         = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + security_groups              = (known after apply)
      + source_dest_check            = false
      + subnet_id                    = (known after apply)
      + tags                         = {
          + "Createdby"     = "Ololosh Ivanovich"
          + "Environment"   = "PROD"
          + "Name"          = "web_server-ec2-prod-2"
          + "Orchestration" = "Terraform"
        }
      + tenancy                      = "default"
      + user_data                    = "e794f07897493880c936c2f375cb19e9e1077501"
      + volume_tags                  = (known after apply)
      + vpc_security_group_ids       = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = true
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 8
          + volume_type           = "gp2"
        }
    }

  # module.ec2.aws_key_pair.key_pair will be created
  + resource "aws_key_pair" "key_pair" {
      + fingerprint = (known after apply)
      + id          = (known after apply)
      + key_name    = "web_server-key_pair-prod"
      + key_pair_id = (known after apply)
      + public_key  = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCfBaIxjWWTbq8Pq8FrxodgBeoZ8AVzQG7Sv+Z4Sx+DZVtQXIvxyeHXAH+zUiz+TetKWkYaD8Izkxr2A3Y9HU43UR1NEmcxFoeV6UcySvMYsXDHcedvaN2kt4qqIAlOzY/CFNgOz+kcgJNHnfQrThN2o+po5ItcJmY0vJB9MJnXpXqnMJJYkvNGOAZxfJ7U+hgS/yBhJgeiB7ThKyG27/dwFGviUIwt9phFt2R5BaS8U1EQpvb7qcKqhBIwpbNkGFElxtcfl1JVa0pMFZYr4LULVqQjTkMz0qhqbgGgSJY9LVMNtxAePkmjHUAQalaGOeB/l/Q83HpCqToPkF3PgTpX arudy@UW"
    }

  # module.iam.aws_iam_instance_profile.iam_instance_profile will be created
  + resource "aws_iam_instance_profile" "iam_instance_profile" {
      + arn         = (known after apply)
      + create_date = (known after apply)
      + id          = (known after apply)
      + name        = "my-security-iam_instance_profile-prod"
      + path        = "/"
      + role        = "my-security-iam_role-prod"
      + roles       = (known after apply)
      + unique_id   = (known after apply)
    }

  # module.iam.aws_iam_policy.iam_policy will be created
  + resource "aws_iam_policy" "iam_policy" {
      + arn         = (known after apply)
      + description = "AIM My-Security-policy-PROD policy"
      + id          = (known after apply)
      + name        = "my-security-iam_policy-prod"
      + path        = "/"
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "rds:ListTagsForResource",
                          + "rds:Describe*",
                          + "logs:GetLogEvents",
                          + "logs:DescribeLogStreams",
                          + "elasticache:Describe*",
                          + "ec2:Owner",
                          + "ec2:DescribeVpcs",
                          + "ec2:DescribeSecurityGroups",
                          + "ec2:DescribeAvailabilityZones",
                          + "ec2:DescribeAccountAttributes",
                          + "cloudwatch:GetMetricStatistics",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                      + Sid      = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
    }

  # module.iam.aws_iam_policy_attachment.iam_policy_attachment will be created
  + resource "aws_iam_policy_attachment" "iam_policy_attachment" {
      + id         = (known after apply)
      + name       = "my-security-iam_policy_attachment-prod"
      + policy_arn = (known after apply)
      + roles      = [
          + "my-security-iam_role-prod",
        ]
    }

  # module.iam.aws_iam_role.iam_role will be created
  + resource "aws_iam_role" "iam_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + description           = "IMA My-Security-role-PROD role"
      + force_detach_policies = false
      + id                    = (known after apply)
      + max_session_duration  = 3600
      + name                  = "my-security-iam_role-prod"
      + path                  = "/"
      + unique_id             = (known after apply)
    }

  # module.vpc.aws_default_network_acl.default_acl will be created
  + resource "aws_default_network_acl" "default_acl" {
      + default_network_acl_id = (known after apply)
      + id                     = (known after apply)
      + owner_id               = (known after apply)
      + tags                   = {
          + "Createdby"     = "Ololosh Ivanovich"
          + "Environment"   = "PROD"
          + "Name"          = "My-nacl-PROD"
          + "Orchestration" = "Terraform"
        }
      + vpc_id                 = (known after apply)

      + egress {
          + action     = "allow"
          + cidr_block = "0.0.0.0/0"
          + from_port  = 1024
          + protocol   = "tcp"
          + rule_no    = 103
          + to_port    = 65535
        }
      + egress {
          + action     = "allow"
          + cidr_block = "0.0.0.0/0"
          + from_port  = 443
          + protocol   = "tcp"
          + rule_no    = 102
          + to_port    = 443
        }
      + egress {
          + action     = "allow"
          + cidr_block = "0.0.0.0/0"
          + from_port  = 80
          + protocol   = "tcp"
          + rule_no    = 101
          + to_port    = 80
        }
      + egress {
          + action     = "allow"
          + cidr_block = "192.168.0.0/16"
          + from_port  = 0
          + protocol   = "all"
          + rule_no    = 100
          + to_port    = 0
        }

      + ingress {
          + action     = "allow"
          + cidr_block = "0.0.0.0/0"
          + from_port  = 22
          + protocol   = "tcp"
          + rule_no    = 102
          + to_port    = 22
        }
      + ingress {
          + action     = "allow"
          + cidr_block = "0.0.0.0/0"
          + from_port  = 32768
          + protocol   = "tcp"
          + rule_no    = 103
          + to_port    = 61000
        }
      + ingress {
          + action     = "allow"
          + cidr_block = "0.0.0.0/0"
          + from_port  = 443
          + protocol   = "tcp"
          + rule_no    = 101
          + to_port    = 443
        }
      + ingress {
          + action     = "allow"
          + cidr_block = "0.0.0.0/0"
          + from_port  = 80
          + protocol   = "tcp"
          + rule_no    = 100
          + to_port    = 80
        }
    }

  # module.vpc.aws_internet_gateway.internet_gw[0] will be created
  + resource "aws_internet_gateway" "internet_gw" {
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Createdby"     = "Ololosh Ivanovich"
          + "Environment"   = "PROD"
          + "Name"          = "internet-gateway to My-vpc-PROD"
          + "Orchestration" = "Terraform"
        }
      + vpc_id   = (known after apply)
    }

  # module.vpc.aws_route.public_internet_gateway[0] will be created
  + resource "aws_route" "public_internet_gateway" {
      + destination_cidr_block     = "0.0.0.0/0"
      + destination_prefix_list_id = (known after apply)
      + egress_only_gateway_id     = (known after apply)
      + gateway_id                 = (known after apply)
      + id                         = (known after apply)
      + instance_id                = (known after apply)
      + instance_owner_id          = (known after apply)
      + nat_gateway_id             = (known after apply)
      + network_interface_id       = (known after apply)
      + origin                     = (known after apply)
      + route_table_id             = (known after apply)
      + state                      = (known after apply)
    }

  # module.vpc.aws_route_table.private_route_tables[0] will be created
  + resource "aws_route_table" "private_route_tables" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = {
          + "Createdby"     = "Ololosh Ivanovich"
          + "Environment"   = "PROD"
          + "Name"          = "private_route_tables"
          + "Orchestration" = "Terraform"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table.private_route_tables[1] will be created
  + resource "aws_route_table" "private_route_tables" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = {
          + "Createdby"     = "Ololosh Ivanovich"
          + "Environment"   = "PROD"
          + "Name"          = "private_route_tables"
          + "Orchestration" = "Terraform"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table.public_route_tables[0] will be created
  + resource "aws_route_table" "public_route_tables" {
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = {
          + "Createdby"     = "Ololosh Ivanovich"
          + "Environment"   = "PROD"
          + "Name"          = "public_route_tables"
          + "Orchestration" = "Terraform"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table_association.private_route_table_associations[0] will be created
  + resource "aws_route_table_association" "private_route_table_associations" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.private_route_table_associations[1] will be created
  + resource "aws_route_table_association" "private_route_table_associations" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.private_route_table_associations[2] will be created
  + resource "aws_route_table_association" "private_route_table_associations" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.public_route_table_associations[0] will be created
  + resource "aws_route_table_association" "public_route_table_associations" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.public_route_table_associations[1] will be created
  + resource "aws_route_table_association" "public_route_table_associations" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.public_route_table_associations[2] will be created
  + resource "aws_route_table_association" "public_route_table_associations" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_security_group.sg will be created
  + resource "aws_security_group" "sg" {
      + arn                    = (known after apply)
      + description            = "Security Group My-sg-PROD"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "My-sg-PROD"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Createdby"     = "Ololosh Ivanovich"
          + "Environment"   = "PROD"
          + "Name"          = "My-sg-PROD"
          + "Orchestration" = "Terraform"
        }
      + vpc_id                 = (known after apply)
    }

  # module.vpc.aws_security_group_rule.default_egress[0] will be created
  + resource "aws_security_group_rule" "default_egress" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + from_port                = 0
      + id                       = (known after apply)
      + protocol                 = "-1"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 0
      + type                     = "egress"
    }

  # module.vpc.aws_security_group_rule.icmp-self will be created
  + resource "aws_security_group_rule" "icmp-self" {
      + from_port                = -1
      + id                       = (known after apply)
      + protocol                 = "icmp"
      + security_group_id        = (known after apply)
      + self                     = true
      + source_security_group_id = (known after apply)
      + to_port                  = -1
      + type                     = "ingress"
    }

  # module.vpc.aws_security_group_rule.ingress_ports[0] will be created
  + resource "aws_security_group_rule" "ingress_ports" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + from_port                = 22
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 22
      + type                     = "ingress"
    }

  # module.vpc.aws_security_group_rule.ingress_ports[1] will be created
  + resource "aws_security_group_rule" "ingress_ports" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + from_port                = 80
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 80
      + type                     = "ingress"
    }

  # module.vpc.aws_security_group_rule.ingress_ports[2] will be created
  + resource "aws_security_group_rule" "ingress_ports" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + from_port                = 3306
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 3306
      + type                     = "ingress"
    }

  # module.vpc.aws_security_group_rule.ingress_ports[3] will be created
  + resource "aws_security_group_rule" "ingress_ports" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + from_port                = 443
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 443
      + type                     = "ingress"
    }

  # module.vpc.aws_subnet.private_subnets[0] will be created
  + resource "aws_subnet" "private_subnets" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "eu-central-1b"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "192.168.11.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Createdby"     = "Ololosh Ivanovich"
          + "Environment"   = "PROD"
          + "Name"          = "private_subnet-eu-central-1b"
          + "Orchestration" = "Terraform"
        }
      + vpc_id                          = (known after apply)
    }

  # module.vpc.aws_subnet.private_subnets[1] will be created
  + resource "aws_subnet" "private_subnets" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "eu-central-1a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "192.168.12.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = false
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Createdby"     = "Ololosh Ivanovich"
          + "Environment"   = "PROD"
          + "Name"          = "private_subnet-eu-central-1a"
          + "Orchestration" = "Terraform"
        }
      + vpc_id                          = (known after apply)
    }

  # module.vpc.aws_subnet.public_subnets[0] will be created
  + resource "aws_subnet" "public_subnets" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "eu-central-1b"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "192.168.21.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Createdby"     = "Ololosh Ivanovich"
          + "Environment"   = "PROD"
          + "Name"          = "public_subnet-eu-central-1b"
          + "Orchestration" = "Terraform"
        }
      + vpc_id                          = (known after apply)
    }

  # module.vpc.aws_subnet.public_subnets[1] will be created
  + resource "aws_subnet" "public_subnets" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "eu-central-1a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "192.168.22.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block                 = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Createdby"     = "Ololosh Ivanovich"
          + "Environment"   = "PROD"
          + "Name"          = "public_subnet-eu-central-1a"
          + "Orchestration" = "Terraform"
        }
      + vpc_id                          = (known after apply)
    }

  # module.vpc.aws_vpc.vpc will be created
  + resource "aws_vpc" "vpc" {
      + arn                              = (known after apply)
      + assign_generated_ipv6_cidr_block = false
      + cidr_block                       = "192.168.0.0/16"
      + default_network_acl_id           = (known after apply)
      + default_route_table_id           = (known after apply)
      + default_security_group_id        = (known after apply)
      + dhcp_options_id                  = (known after apply)
      + enable_classiclink               = false
      + enable_classiclink_dns_support   = (known after apply)
      + enable_dns_hostnames             = true
      + enable_dns_support               = true
      + id                               = (known after apply)
      + instance_tenancy                 = "default"
      + ipv6_association_id              = (known after apply)
      + ipv6_cidr_block                  = (known after apply)
      + main_route_table_id              = (known after apply)
      + owner_id                         = (known after apply)
      + tags                             = {
          + "Createdby"     = "Ololosh Ivanovich"
          + "Environment"   = "PROD"
          + "Name"          = "my-vpc-prod"
          + "Orchestration" = "Terraform"
        }
    }

Plan: 35 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.